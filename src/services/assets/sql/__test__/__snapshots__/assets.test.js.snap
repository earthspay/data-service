// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Assets SQL queries tests should build correct get sql query 1`] = `"select \\"asset_id\\", \\"asset_name\\", \\"description\\", \\"sender\\", \\"issue_height\\", \\"total_quantity\\", \\"decimals\\", \\"reissuable\\", \\"ticker\\", \\"issue_timestamp\\", \\"has_script\\", \\"min_sponsored_asset_fee\\" from \\"assets\\" where \\"asset_id\\" in ('123')"`;

exports[`Assets SQL queries tests should build correct mget sql query 1`] = `"select \\"asset_id\\", \\"asset_name\\", \\"description\\", \\"sender\\", \\"issue_height\\", \\"total_quantity\\", \\"decimals\\", \\"reissuable\\", \\"ticker\\", \\"issue_timestamp\\", \\"has_script\\", \\"min_sponsored_asset_fee\\" from \\"assets\\" where \\"asset_id\\" in ('1', '2', '3')"`;

exports[`Assets SQL queries tests should build correct search sql query 1`] = `"select \\"asset_id\\", \\"asset_name\\", \\"description\\", \\"sender\\", \\"issue_height\\", \\"total_quantity\\", \\"decimals\\", \\"reissuable\\", \\"ticker\\", \\"issue_timestamp\\", \\"has_script\\", \\"min_sponsored_asset_fee\\" from \\"assets\\" where \\"ticker\\" is not null"`;

exports[`Assets SQL queries tests should build correct search sql query 2`] = `"select \\"asset_id\\", \\"asset_name\\", \\"description\\", \\"sender\\", \\"issue_height\\", \\"total_quantity\\", \\"decimals\\", \\"reissuable\\", \\"ticker\\", \\"issue_timestamp\\", \\"has_script\\", \\"min_sponsored_asset_fee\\" from \\"assets\\" where \\"ticker\\" = 'BTC'"`;

exports[`Assets SQL queries tests should build correct search sql query 3`] = `"with \\"assets_cte\\" as (select distinct on (\\"r\\".\\"asset_id\\") \\"r\\".\\"asset_id\\", \\"r\\".\\"ticker\\", \\"r\\".\\"asset_name\\", row_number() over (order by r.rank desc, r.height asc, r.asset_id asc) as \\"rn\\" from (select \\"t\\".\\"asset_id\\" as \\"asset_id\\", \\"t\\".\\"asset_name\\" as \\"asset_name\\", \\"t\\".\\"ticker\\" as \\"ticker\\", \\"t\\".\\"issue_height\\" as \\"height\\", ts_rank(to_tsvector('simple', t.asset_id), to_tsquery('EARTHS:*'), 3) * case when t.ticker is null then 128 else 256 end as \\"rank\\" from \\"assets\\" as \\"t\\" where \\"t\\".\\"asset_id\\" = 'EARTHS' union all select \\"asset_id\\", \\"asset_name\\", \\"ticker\\", \\"height\\", ts_rank(to_tsvector('simple', asset_name), to_tsquery('EARTHS:*'), 3) * case when ticker is null then 64 else 128 end as \\"rank\\" from \\"assets_metadata\\" where \\"asset_name\\" ilike 'EARTHS%' union all select \\"ti\\".\\"asset_id\\" as \\"asset_id\\", \\"t\\".\\"asset_name\\" as \\"asset_name\\", \\"ti\\".\\"ticker\\" as \\"ticker\\", \\"t\\".\\"height\\" as \\"height\\", ts_rank(to_tsvector('simple', ti.ticker), to_tsquery('EARTHS:*'), 3) * 32 as \\"rank\\" from \\"tickers\\" as \\"ti\\" left join \\"txs_3\\" as \\"t\\" on \\"ti\\".\\"asset_id\\" = \\"t\\".\\"asset_id\\" where \\"ticker\\" like 'EARTHS%' union all select \\"t\\".\\"asset_id\\" as \\"asset_id\\", \\"t\\".\\"asset_name\\" as \\"asset_name\\", \\"t\\".\\"ticker\\" as \\"ticker\\", \\"t\\".\\"issue_height\\" as \\"height\\", ts_rank(to_tsvector('simple', t.asset_name), to_tsquery('EARTHS:*'), 3) * case when t.ticker is null then 16 else 32 end as \\"rank\\" from \\"assets\\" as \\"t\\" where to_tsvector('simple', t.asset_name) @@ to_tsquery('EARTHS:*') or \\"t\\".\\"asset_name\\" ilike 'EARTHS%') as \\"r\\" order by \\"r\\".\\"asset_id\\" asc) select \\"a\\".\\"asset_id\\", \\"a\\".\\"asset_name\\", \\"a\\".\\"description\\", \\"a\\".\\"sender\\", \\"a\\".\\"issue_height\\", \\"a\\".\\"total_quantity\\", \\"a\\".\\"decimals\\", \\"a\\".\\"reissuable\\", \\"a\\".\\"ticker\\", \\"a\\".\\"issue_timestamp\\", \\"a\\".\\"has_script\\", \\"a\\".\\"min_sponsored_asset_fee\\" from \\"assets_cte\\" inner join \\"assets\\" as \\"a\\" on \\"assets_cte\\".\\"asset_id\\" = \\"a\\".\\"asset_id\\" order by \\"rn\\" asc"`;

exports[`Assets SQL queries tests should build correct search sql query 4`] = `"with \\"assets_cte\\" as (select distinct on (\\"r\\".\\"asset_id\\") \\"r\\".\\"asset_id\\", \\"r\\".\\"ticker\\", \\"r\\".\\"asset_name\\", row_number() over (order by r.rank desc, r.height asc, r.asset_id asc) as \\"rn\\" from (select \\"t\\".\\"asset_id\\" as \\"asset_id\\", \\"t\\".\\"asset_name\\" as \\"asset_name\\", \\"t\\".\\"ticker\\" as \\"ticker\\", \\"t\\".\\"issue_height\\" as \\"height\\", ts_rank(to_tsvector('simple', t.asset_id), to_tsquery('bitcoin & cas:*'), 3) * case when t.ticker is null then 128 else 256 end as \\"rank\\" from \\"assets\\" as \\"t\\" where \\"t\\".\\"asset_id\\" = 'bitcoin cas' union all select \\"asset_id\\", \\"asset_name\\", \\"ticker\\", \\"height\\", ts_rank(to_tsvector('simple', asset_name), to_tsquery('bitcoin cas:*'), 3) * case when ticker is null then 64 else 128 end as \\"rank\\" from \\"assets_metadata\\" where \\"asset_name\\" ilike 'bitcoin cas%' union all select \\"ti\\".\\"asset_id\\" as \\"asset_id\\", \\"t\\".\\"asset_name\\" as \\"asset_name\\", \\"ti\\".\\"ticker\\" as \\"ticker\\", \\"t\\".\\"height\\" as \\"height\\", ts_rank(to_tsvector('simple', ti.ticker), to_tsquery('bitcoin & cas:*'), 3) * 32 as \\"rank\\" from \\"tickers\\" as \\"ti\\" left join \\"txs_3\\" as \\"t\\" on \\"ti\\".\\"asset_id\\" = \\"t\\".\\"asset_id\\" where \\"ticker\\" like 'bitcoin cas%' union all select \\"t\\".\\"asset_id\\" as \\"asset_id\\", \\"t\\".\\"asset_name\\" as \\"asset_name\\", \\"t\\".\\"ticker\\" as \\"ticker\\", \\"t\\".\\"issue_height\\" as \\"height\\", ts_rank(to_tsvector('simple', t.asset_name), to_tsquery('bitcoin & cas:*'), 3) * case when t.ticker is null then 16 else 32 end as \\"rank\\" from \\"assets\\" as \\"t\\" where to_tsvector('simple', t.asset_name) @@ to_tsquery('bitcoin & cas:*') or \\"t\\".\\"asset_name\\" ilike 'bitcoin cas%') as \\"r\\" order by \\"r\\".\\"asset_id\\" asc) select \\"a\\".\\"asset_id\\", \\"a\\".\\"asset_name\\", \\"a\\".\\"description\\", \\"a\\".\\"sender\\", \\"a\\".\\"issue_height\\", \\"a\\".\\"total_quantity\\", \\"a\\".\\"decimals\\", \\"a\\".\\"reissuable\\", \\"a\\".\\"ticker\\", \\"a\\".\\"issue_timestamp\\", \\"a\\".\\"has_script\\", \\"a\\".\\"min_sponsored_asset_fee\\" from \\"assets_cte\\" inner join \\"assets\\" as \\"a\\" on \\"assets_cte\\".\\"asset_id\\" = \\"a\\".\\"asset_id\\" order by \\"rn\\" asc"`;

exports[`Assets SQL queries tests should build correct search sql query 5`] = `"with \\"assets_cte\\" as (select distinct on (\\"r\\".\\"asset_id\\") \\"r\\".\\"asset_id\\", \\"r\\".\\"ticker\\", \\"r\\".\\"asset_name\\", row_number() over (order by r.rank desc, r.height asc, r.asset_id asc) as \\"rn\\" from (select \\"t\\".\\"asset_id\\" as \\"asset_id\\", \\"t\\".\\"asset_name\\" as \\"asset_name\\", \\"t\\".\\"ticker\\" as \\"ticker\\", \\"t\\".\\"issue_height\\" as \\"height\\", ts_rank(to_tsvector('simple', t.asset_id), to_tsquery('BIT:*'), 3) * case when t.ticker is null then 128 else 256 end as \\"rank\\" from \\"assets\\" as \\"t\\" where \\"t\\".\\"asset_id\\" = 'BIT' union all select \\"asset_id\\", \\"asset_name\\", \\"ticker\\", \\"height\\", ts_rank(to_tsvector('simple', asset_name), to_tsquery('BIT:*'), 3) * case when ticker is null then 64 else 128 end as \\"rank\\" from \\"assets_metadata\\" where \\"asset_name\\" ilike 'BIT%' union all select \\"ti\\".\\"asset_id\\" as \\"asset_id\\", \\"t\\".\\"asset_name\\" as \\"asset_name\\", \\"ti\\".\\"ticker\\" as \\"ticker\\", \\"t\\".\\"height\\" as \\"height\\", ts_rank(to_tsvector('simple', ti.ticker), to_tsquery('BIT:*'), 3) * 32 as \\"rank\\" from \\"tickers\\" as \\"ti\\" left join \\"txs_3\\" as \\"t\\" on \\"ti\\".\\"asset_id\\" = \\"t\\".\\"asset_id\\" where \\"ticker\\" like 'BIT%' union all select \\"t\\".\\"asset_id\\" as \\"asset_id\\", \\"t\\".\\"asset_name\\" as \\"asset_name\\", \\"t\\".\\"ticker\\" as \\"ticker\\", \\"t\\".\\"issue_height\\" as \\"height\\", ts_rank(to_tsvector('simple', t.asset_name), to_tsquery('BIT:*'), 3) * case when t.ticker is null then 16 else 32 end as \\"rank\\" from \\"assets\\" as \\"t\\" where to_tsvector('simple', t.asset_name) @@ to_tsquery('BIT:*') or \\"t\\".\\"asset_name\\" ilike 'BIT%') as \\"r\\" order by \\"r\\".\\"asset_id\\" asc) select \\"a\\".\\"asset_id\\", \\"a\\".\\"asset_name\\", \\"a\\".\\"description\\", \\"a\\".\\"sender\\", \\"a\\".\\"issue_height\\", \\"a\\".\\"total_quantity\\", \\"a\\".\\"decimals\\", \\"a\\".\\"reissuable\\", \\"a\\".\\"ticker\\", \\"a\\".\\"issue_timestamp\\", \\"a\\".\\"has_script\\", \\"a\\".\\"min_sponsored_asset_fee\\" from \\"assets_cte\\" inner join \\"assets\\" as \\"a\\" on \\"assets_cte\\".\\"asset_id\\" = \\"a\\".\\"asset_id\\" where \\"rn\\" > (select \\"rn\\" from \\"assets_cte\\" where \\"asset_id\\" = 'FiKAykpjAFkiukke7ZpVX511HHumPZYKyu6GXokPEkcT') order by \\"rn\\" asc limit 3"`;
